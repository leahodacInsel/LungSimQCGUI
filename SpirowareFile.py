from File import File
from SpirowareHeader import SpirowareHeader


class SpirowareFile(File):
    """
    A Spiroware file is a specific kind of multiple-breath washout (often raw) data. It is generated by the Ecomedics
    AG Exhalyzer D system for the analysis by Spiroware. It contains several key features:
    Name:   The name is formatted automatically to be A-date-time-codename&birthdate-test-set.txt
            This format is entirely optional however, so while it contains a lot of useful information, we cannot depend
            on the format to remain the same or be correct. Additionally, this format has undergone several changes,
            with the information regarding Set and washout type being added later.

    Signals: A Spiroware file contains several signals collected across the Exhalyzer D device. The flow signal is
            measured near the airway opening of the patient and measures flow of air / oxygen into and out of the lungs.
            It is written in liters/s
            The CO2 signal is measured within the mainstream flow, as a percentage.
            The O2 signal is measured in a sampled side stream within the main box of the Exhalyzer D device, and is not
            initially synchronized to the flow, as a percentage.
            The molar mass of the volumes going into and out of the lungs is measured at two points: near the flow meter
            (with some confounding factors like temperature and humidity influencing it) and in the side stream sampled
            flow in the main box.
            This is implemented here as a dictionary of Signal objects

    Header: Some additional information regarding the measurement is collected in the last header position, such as
            temperature and pressure on the day of the recording. The header also controls some signal processing
            options, which makes analyzing them in a standard tricky.
    """

    def __init__(self, **kwargs):
        """
        A usable Spiroware File basically always needs to have a name(+path), a dictionary of signals, and a header.

        A Spiroware File can be initialized in one of two ways:
        1. Provide a init_file, a.k.a a path + filename from which all the information should be extracted.
        2. Provide the information in header, co2_name, signals yourself via the **kwargs

        header: Header containing additional information about the file, in a Spiroware-specific format. Default
            is a non-meaningful string to insert at the appropriate place.
        co2_name: Important detail information for the CO2 signal. Depending on whether the name of the CO2 column
            within the file is called CO2 or CO2_RAW, a different correction will be applied to the CO2 signal.
            Basically, up to a certain point in the development of Spiroware, the influence of O2 on the measured CO2
            signal was corrected for by applying one fixed factor to the CO2 signal (of 1.075). This corrected CO2
            signal was written into the A-files and titled with CO2. These files, when analysed, need to have this
            factor undone before the rest of the processing can continue. For the other files, this step is not
            necessary.
        :param kwargs: additional key-word arguments
        """
        super().__init__(**kwargs)
        self.header = kwargs.pop('header', SpirowareHeader(raw_string='(SPW)'))
        self.co2_name = kwargs.pop('co2_name', None)
        self.method = kwargs.pop('method', None)
        self.set = kwargs.pop('set', None)

    @staticmethod
    def co2_name_from_first_line(first_line):
        """
        The name of the CO2-containing column controls one specific signal processing step. If it is "CO2_RAW", nothing
        happens, whereas if it is "CO2", then the co2 signal initially needs to be corrected by a certain factor.
        This function checks whether the header name for CO2 is "CO2" or "CO2_RAW", and saves it.
        :param first_line: path + filename of .txt file
        :return: CO2 column name
        """
        first_line_items = first_line.split()
        if 'CO2' in first_line_items:
            return 'CO2'
        else:
            return 'CO2_RAW'

    @classmethod
    def from_txt(cls, fullname):
        """
        """
        first_line = cls.first_line_from_fullname(fullname=fullname)
        header = cls.header_from_first_line(first_line=first_line)
        co2_name = cls.co2_name_from_first_line(first_line=first_line)
        file = cls(
            signals=super(cls, cls).signals_from_txt(fullname=fullname),
            filename=super(cls, cls).filename_from_fullname(fullname=fullname),
            path=super(cls, cls).path_from_fullname(fullname=fullname),
            fullname=fullname,
            first_line=first_line,
            header=header,
            co2_name=co2_name,
            set=cls.set_from_fullname(fullname=fullname),
            method=cls.method_from_fullname(fullname=fullname)
        )
        return file

    @staticmethod
    def header_from_first_line(first_line):
        """
        A header in the context of a Spiroware "Afile" is a collection of information found at the last position of the
        header items in the txt file containing the raw signals. The header contains information about the
        temperature and pressure at the time of recording, as well as a complicated collection of options that control
        signal processing functions. This function simply extracts this string, and stores it in the SpirowareFile
        object.
        :return: string containing the last item of the file header
        """
        return SpirowareHeader(raw_string=first_line.split()[-1])

    @staticmethod
    def method_from_fullname(fullname):
        """
        The MBW method of a Spiroware file refers to whether the file contains a nitrogen multiple-breath washout or a
        sulfur hexafluoride multiple-breath washout. The information whether the file contains SF6 data is generally
        contained within the title.
        :param fullname:
        :return: string "sf6_mbw" or "n2_mbw"
        """
        if '-SF6' in fullname:
            return 'sf6_mbw'
        else:
            return 'n2_mbw'

    @staticmethod
    def set_from_fullname(fullname):
        """
        Function to extract information from the filename about which dead space reducer set was used.
        This can be either 1, 2 or 3.
        :param fullname:
        :return: strings 'Set1', 'Set2', 'Set3', unknown, or multiple
        """
        if not ('Set' in fullname):
            return 'unknown'
        elif fullname.count('Set') > 1:
            return 'multiple'
        elif 'Set1' in fullname:
            return 'set1'
        elif 'Set2' in fullname:
            return 'set2'
        elif 'Set3' in fullname:
            return 'set3'
        else:
            return 'unknown'
